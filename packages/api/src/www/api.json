{
    "openapi": "3.0.1",
    "info": {
        "title": "Solar Core: Public API"
    },
    "servers": [],
    "tags": [
        {
            "name": "Blockchain"
        },
        {
            "name": "Node"
        },
        {
            "name": "Blocks"
        },
        {
            "name": "Delegates"
        },
        {
            "name": "Locks"
        },
        {
            "name": "Rounds"
        },
        {
            "name": "Transactions"
        },
        {
            "name": "Votes"
        },
        {
            "name": "Wallets"
        }
    ],
    "paths": {
        "/blockchain": {
            "get": {
                "tags": [
                    "Blockchain"
                ],
                "summary": "Get general blockchain information",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/node/configuration": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get node configuration information",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/node/configuration/crypto": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get node crypto configuration information",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/node/fees": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get node fee statistics",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/node/status": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get node status information",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/node/syncing": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get node sync status information",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/peers": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "See node peer status information",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The node version by which the resources will be filtered",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "height:asc",
                                "height:desc",
                                "latency:asc",
                                "latency:desc",
                                "version:asc",
                                "version:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/peers/{ip}": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Find a single peer by its IP address",
                "parameters": [
                    {
                        "name": "ip",
                        "in": "path",
                        "description": "IP address of the peer",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ip"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Peer not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/blocks": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "List blocks or search for blocks meeting specific criteria",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the block to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of the block(s) to be returned",
                        "schema": {
                            "type": "integer",
                            "enum": [
                                0
                            ]
                        }
                    },
                    {
                        "name": "previousBlock",
                        "in": "query",
                        "description": "Previous block ID chained to the block to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "payloadHash",
                        "in": "query",
                        "description": "Hash of the transaction payload of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "generatorPublicKey",
                        "in": "query",
                        "description": "Public key of the delegate that forged the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "blockSignature",
                        "in": "query",
                        "description": "Signature of the block to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/signature"
                        }
                    },
                    {
                        "name": "height",
                        "in": "query",
                        "description": "Exact height of the block to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "height.from",
                        "in": "query",
                        "description": "Earliest height of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "height.to",
                        "in": "query",
                        "description": "Latest height of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "Exact time, in seconds since the epoch, of the block to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.from",
                        "in": "query",
                        "description": "Earliest time, in seconds since the epoch, of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.to",
                        "in": "query",
                        "description": "Latest time, in seconds since the epoch, of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "numberOfTransactions",
                        "in": "query",
                        "description": "Exact number of transactions inside the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "numberOfTransactions.from",
                        "in": "query",
                        "description": "Minimum number of transactions inside the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "numberOfTransactions.to",
                        "in": "query",
                        "description": "Maximum number of transactions inside the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "totalAmount",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "totalAmount.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "totalAmount.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "totalFee",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of the fees of all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "totalFee.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of the fees of all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "totalFee.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of the fees of all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of the fees that were burned in all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of the fees that were burned in all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of the fees that were burned in all transactions in the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "reward",
                        "in": "query",
                        "description": "Exact block reward amount of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "reward.from",
                        "in": "query",
                        "description": "Lowest block reward amount of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "reward.to",
                        "in": "query",
                        "description": "Highest block reward amount of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "payloadLength",
                        "in": "query",
                        "description": "Exact transaction payload length of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "payloadLength.from",
                        "in": "query",
                        "description": "Minimum transaction payload length of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "payloadLength.to",
                        "in": "query",
                        "description": "Maximum transaction payload length of the block(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "blockSignature:asc",
                                "blockSignature:desc",
                                "burnedFee:asc",
                                "burnedFee:desc",
                                "generatorPublicKey:asc",
                                "generatorPublicKey:desc",
                                "height:asc",
                                "height:desc",
                                "id:asc",
                                "id:desc",
                                "numberOfTransactions:asc",
                                "numberOfTransactions:desc",
                                "payloadHash:asc",
                                "payloadHash:desc",
                                "payloadLength:asc",
                                "payloadLength:desc",
                                "previousBlock:asc",
                                "previousBlock:desc",
                                "reward:asc",
                                "reward:desc",
                                "timestamp:asc",
                                "timestamp:desc",
                                "totalAmount:asc",
                                "totalAmount:desc",
                                "totalFee:asc",
                                "totalFee:desc",
                                "version:asc",
                                "version:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/blocks/{block}": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Find a single block by its ID or height",
                "parameters": [
                    {
                        "name": "block",
                        "in": "path",
                        "description": "ID or height of block to return",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/idOrHeight"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Block not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/blocks/last": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Get the most recent block in the blockchain",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/blocks/{block}/transactions": {
            "get": {
                "tags": [
                    "Blocks"
                ],
                "summary": "Find transactions in a specific block",
                "parameters": [
                    {
                        "name": "block",
                        "in": "path",
                        "description": "ID or height of block to get transactions",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/idOrHeight"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Block not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/delegates": {
            "get": {
                "tags": [
                    "Delegates"
                ],
                "summary": "List delegates or search for delegates meeting specific criteria",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "The address of the delegate to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    {
                        "name": "publicKey",
                        "in": "query",
                        "description": "The public key of the delegate to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The username of the delegate to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/username"
                        }
                    },
                    {
                        "name": "isResigned",
                        "in": "query",
                        "description": "Whether the delegate(s) to be returned are resigned and no longer able to forge",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "resignationType",
                        "in": "query",
                        "description": "Whether the delegate(s) to be returned have resigned permanently or temporarily",
                        "schema": {
                            "enum": [
                                "permanent",
                                "temporary"
                            ]
                        }
                    },
                    {
                        "name": "forged.fees",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of all fees forged by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.fees.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of all fees forged by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.fees.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of all fees forged by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.burnedFees",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of all fees burned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.burnedFees.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of all fees burned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.burnedFees.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of all fees burned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.rewards",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of all block rewards earned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.rewards.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of all block rewards earned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.rewards.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of all block rewards earned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.devFunds",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of all development funds raised by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.devFunds.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of all development funds raised by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.devFunds.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of all all development funds raised by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },                    {
                        "name": "forged.total",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of all unburned fees plus block rewards earned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.total.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of all unburned fees plus block rewards earned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "forged.total.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of all unburned fees plus block rewards earned by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "votesReceived.percent",
                        "in": "query",
                        "description": "Exact total vote percentage of the delegate(s) to be returned",
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        }
                    },
                    {
                        "name": "votesReceived.percent.from",
                        "in": "query",
                        "description": "Minimum total vote percentage of the delegate(s) to be returned",
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        }
                    },
                    {
                        "name": "votesReceived.percent.to",
                        "in": "query",
                        "description": "Maximum total vote percentage rate of the delegate(s) to be returned",
                        "schema": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1
                        }
                    },
                    {
                        "name": "votesReceived.votes",
                        "in": "query",
                        "description": "Exact amount of vote weight for the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "votesReceived.votes.from",
                        "in": "query",
                        "description": "Minimum amount of vote weight for the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "votesReceived.votes.to",
                        "in": "query",
                        "description": "Maximum amount of vote weight for the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "votesReceived.voters",
                        "in": "query",
                        "description": "Exact number of voters for the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "votesReceived.voters.from",
                        "in": "query",
                        "description": "Minimum number of voters for the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "votesReceived.voters.to",
                        "in": "query",
                        "description": "Maximum number of voters for the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "blocks.produced",
                        "in": "query",
                        "description": "Exact number of blocks produced by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "blocks.produced.from",
                        "in": "query",
                        "description": "Minimum number of blocks produced by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "blocks.produced.to",
                        "in": "query",
                        "description": "Maximum number of blocks produced by the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "rank",
                        "in": "query",
                        "description": "Exact rank of the delegate to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "rank.from",
                        "in": "query",
                        "description": "Lowest rank of the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "rank.to",
                        "in": "query",
                        "description": "Highest rank of the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Exact node version running on the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/semver"
                        }
                    },
                    {
                        "name": "version.from",
                        "in": "query",
                        "description": "Earliest node version running on the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/semver"
                        }
                    },
                    {
                        "name": "version.to",
                        "in": "query",
                        "description": "Latest node version running on the delegate(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/semver"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "address:asc",
                                "address:desc",
                                "blocks.produced:asc",
                                "blocks.produced:desc",
                                "forged.burnedFees:asc",
                                "forged.burnedFees:desc",
                                "forged.devFunds:asc",
                                "forged.devFunds:desc",
                                "forged.fees:asc",
                                "forged.fees:desc",
                                "forged.rewards:asc",
                                "forged.rewards:desc",
                                "forged.total:asc",
                                "forged.total:desc",
                                "isResigned:asc",
                                "isResigned:desc",
                                "publicKey:asc",
                                "publicKey:desc",
                                "rank:asc",
                                "rank:desc",
                                "version:asc",
                                "version:desc",
                                "votesReceived.percent:asc",
                                "votesReceived.percent:desc",
                                "votesReceived.votes:asc",
                                "votesReceived.votes:desc",
                                "votesReceived.voters:asc",
                                "votesReceived.voters:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/delegates/{identifier}": {
            "get": {
                "tags": [
                    "Delegates"
                ],
                "summary": "Find a single delegate by its identifier",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Identifier for delegate (address, public key, username)",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Delegate not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/delegates/{identifier}/blocks": {
            "get": {
                "tags": [
                    "Delegates"
                ],
                "summary": "Find blocks produced by a specific delegate",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Identifier for delegate (address, public key, username)",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Delegate not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/delegates/{identifier}/voters": {
            "get": {
                "tags": [
                    "Delegates"
                ],
                "summary": "Find wallets currently voting for a specific delegate",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Identifier for delegate (address, public key, username)",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Delegate not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/locks": {
            "get": {
                "tags": [
                    "Locks"
                ],
                "summary": "List HTLC transaction locks or search for locks meeting specific criteria",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "lockId",
                        "in": "query",
                        "description": "The lock id to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "senderPublicKey",
                        "in": "query",
                        "description": "Public key of the sender of the lock(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "Address of the recipient of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    {
                        "name": "secretHash",
                        "in": "query",
                        "description": "Secret hash string of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "memo",
                        "in": "query",
                        "description": "Memo string of the lock transaction(s) to be returned",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "name": "isExpired",
                        "in": "query",
                        "description": "Whether the lock(s) to be returned have expired",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "expirationType",
                        "in": "query",
                        "description": "Expiration type (1 = timestamp, 2 = height) of the lock transaction(s) to be returned",
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2
                            ]
                        }
                    },
                    {
                        "name": "expirationValue",
                        "in": "query",
                        "description": "Exact expiration time or height of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "expirationValue.from",
                        "in": "query",
                        "description": "Earliest expiration time or height of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "expirationValue.to",
                        "in": "query",
                        "description": "Latest expiration time or height of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "amount.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "amount.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.epoch",
                        "in": "query",
                        "description": "Exact time, in seconds since the epoch, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.epoch.from",
                        "in": "query",
                        "description": "Earliest time, in seconds since the epoch, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.epoch.to",
                        "in": "query",
                        "description": "Latest time, in seconds since the epoch, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.unix",
                        "in": "query",
                        "description": "Exact time, in UNIX timestamp format, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.unix.from",
                        "in": "query",
                        "description": "Earliest time, in UNIX timestamp format, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.unix.to",
                        "in": "query",
                        "description": "Latest time, in UNIX timestamp format, of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.human",
                        "in": "query",
                        "description": "Exact time, in RFC 3339 human readable format (e.g. 2022-03-28T18:00:00.000Z), of the lock transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/time"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "amount:asc",
                                "amount:desc",
                                "expirationType:asc",
                                "expirationType:desc",
                                "expirationValue:asc",
                                "expirationValue:desc",
                                "isExpired:asc",
                                "isExpired:desc",
                                "lockId:asc",
                                "lockId:desc",
                                "memo:asc",
                                "memo:desc",
                                "recipientId:asc",
                                "recipientId:desc",
                                "secretHash:asc",
                                "secretHash:desc",
                                "senderPublicKey:asc",
                                "senderPublicKey:desc",
                                "timestamp.epoch:asc",
                                "timestamp.epoch:desc",
                                "timestamp.human:asc",
                                "timestamp.human:desc",
                                "timestamp.unix:asc",
                                "timestamp.unix:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/locks/{id}": {
            "get": {
                "tags": [
                    "Locks"
                ],
                "summary": "Find a single HTLC transaction lock by its ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Lock ID",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Lock not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/locks/unlocked": {
            "post": {
                "tags": [
                    "Locks"
                ],
                "summary": "View unlocked HTLC transactions",
                "parameters": [
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "amount:asc",
                                "amount:desc",
                                "blockHeight:asc",
                                "blockHeight:desc",
                                "blockId:asc",
                                "blockId:desc",
                                "burnedFee:asc",
                                "burnedFee:desc",
                                "fee.epoch:asc",
                                "fee.epoch:desc",
                                "id:asc",
                                "id:desc",
                                "memo:asc",
                                "memo:desc",
                                "nonce:asc",
                                "nonce:desc",
                                "recipientId:asc",
                                "recipientId:desc",
                                "senderId:asc",
                                "senderId:desc",
                                "senderPublicKey:asc",
                                "senderPublicKey:desc",
                                "timestamp:asc",
                                "timestamp:desc",
                                "version:asc",
                                "version:desc"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "An ids object containing an array of lock IDs",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/lockIds"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/rounds/{id}/delegates": {
            "get": {
                "tags": [
                    "Rounds"
                ],
                "summary": "Get delegate public keys forging in a specific round",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The forging round number to retrieve the public keys of delegates",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Round not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "List transactions or search for transactions meeting specific criteria",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The transaction id to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/transactionTypes"
                        }
                    },
                    {
                        "name": "typeGroup",
                        "in": "query",
                        "description": "The type group of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/transactionTypeGroups"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/transactionVersions"
                        }
                    },
                    {
                        "name": "blockHeight",
                        "in": "query",
                        "description": "The exact block height containing the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "blockHeight.from",
                        "in": "query",
                        "description": "The earliest block height containing the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "blockHeight.to",
                        "in": "query",
                        "description": "The latest block height containing the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "blockId",
                        "in": "query",
                        "description": "The block ID containing the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "senderPublicKey",
                        "in": "query",
                        "description": "Public key of the sender of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "Address of the sender of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    {
                        "name": "recipientId",
                        "in": "query",
                        "description": "Address of the recipient of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    {
                        "name": "memo",
                        "in": "query",
                        "description": "Memo string of the transaction(s) to be returned",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "Exact amount, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "amount.from",
                        "in": "query",
                        "description": "Minimum amount, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "amount.to",
                        "in": "query",
                        "description": "Maximum amount, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "fee",
                        "in": "query",
                        "description": "Exact fee, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "fee.from",
                        "in": "query",
                        "description": "Minimum fee, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "fee.to",
                        "in": "query",
                        "description": "Maximum fee, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee",
                        "in": "query",
                        "description": "Exact fee amount that was burned, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee.from",
                        "in": "query",
                        "description": "Minimum fee amount that was burned, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee.to",
                        "in": "query",
                        "description": "Maximum fee amount that was burned, in satoshis, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "Exact time, in seconds since the epoch, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.from",
                        "in": "query",
                        "description": "Earliest time, in seconds since the epoch, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.to",
                        "in": "query",
                        "description": "Latest time, in seconds since the epoch, of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "nonce",
                        "in": "query",
                        "description": "Exact nonce of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "nonce.from",
                        "in": "query",
                        "description": "Minimum nonce of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "nonce.to",
                        "in": "query",
                        "description": "Maximum nonce of the transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "amount:asc",
                                "amount:desc",
                                "blockHeight:asc",
                                "blockHeight:desc",
                                "blockId:asc",
                                "blockId:desc",
                                "burnedFee:asc",
                                "burnedFee:desc",
                                "fee:asc",
                                "fee:desc",
                                "id:asc",
                                "id:desc",
                                "nonce:asc",
                                "nonce:desc",
                                "recipientId:asc",
                                "recpientId:desc",
                                "senderId:asc",
                                "senderId:desc",
                                "senderPublicKey:asc",
                                "senderPublicKey:desc",
                                "timestamp:asc",
                                "timestamp:desc",
                                "type:asc",
                                "type:desc",
                                "typeGroup:asc",
                                "typeGroup:desc",
                                "memo:asc",
                                "memo:desc",
                                "version:asc",
                                "version:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            },
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Post transactions to be included in the blockchain",
                "requestBody": {
                    "description": "A transactions object containing an array of signed transactions",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/transactions"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/transactions/{transactionId}": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Find a single transaction by its ID",
                "parameters": [
                    {
                        "name": "transactionId",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Transaction not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/transactions/unconfirmed": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "View unconfirmed transactions not yet in the blockchain",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/transactions/unconfirmed/{transactionId}": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Find a single unconfirmed transaction by its ID",
                "parameters": [
                    {
                        "name": "transactionId",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Transaction not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/transactions/types": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "List transaction types",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/transactions/fees": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "List transaction fees",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/votes": {
            "get": {
                "tags": [
                    "Votes"
                ],
                "summary": "List votes or search for votes meeting specific criteria",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "The vote transaction id to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "blockHeight",
                        "in": "query",
                        "description": "The exact block height containing the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "blockHeight.from",
                        "in": "query",
                        "description": "The earliest block height containing the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "blockHeight.to",
                        "in": "query",
                        "description": "The latest block height containing the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "blockId",
                        "in": "query",
                        "description": "The block ID containing the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    },
                    {
                        "name": "senderPublicKey",
                        "in": "query",
                        "description": "Public key of the sender of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "senderId",
                        "in": "query",
                        "description": "Address of the sender of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    {
                        "name": "fee",
                        "in": "query",
                        "description": "Exact fee, in satoshis, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "fee.from",
                        "in": "query",
                        "description": "Minimum fee, in satoshis, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "fee.to",
                        "in": "query",
                        "description": "Maximum fee, in satoshis, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee",
                        "in": "query",
                        "description": "Exact fee amount that was burned, in satoshis, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee.from",
                        "in": "query",
                        "description": "Minimum fee amount that was burned, in satoshis, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "burnedFee.to",
                        "in": "query",
                        "description": "Maximum fee amount that was burned, in satoshis, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "Exact time, in seconds since the epoch, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.from",
                        "in": "query",
                        "description": "Earliest time, in seconds since the epoch, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "timestamp.to",
                        "in": "query",
                        "description": "Latest time, in seconds since the epoch, of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "nonce",
                        "in": "query",
                        "description": "Exact nonce of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "nonce.from",
                        "in": "query",
                        "description": "Minimum nonce of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "nonce.to",
                        "in": "query",
                        "description": "Maximum nonce of the vote transaction(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/oneOrMore"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "blockHeight:asc",
                                "blockHeight:desc",
                                "blockId:asc",
                                "blockId:desc",
                                "burnedFee:asc",
                                "burnedFee:desc",
                                "fee:asc",
                                "fee:desc",
                                "id:asc",
                                "id:desc",
                                "nonce:asc",
                                "nonce:desc",
                                "senderId:asc",
                                "senderId:desc",
                                "senderPublicKey:asc",
                                "senderPublicKey:desc",
                                "timestamp:asc",
                                "timestamp:desc",
                                "version:asc",
                                "version:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/votes/{transactionId}": {
            "get": {
                "tags": [
                    "Votes"
                ],
                "summary": "Find a single vote by its transaction ID",
                "parameters": [
                    {
                        "name": "transactionId",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Vote not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "List wallets or search for wallets meeting specific criteria",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "The address of the wallet to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/address"
                        }
                    },
                    {
                        "name": "balance",
                        "in": "query",
                        "description": "The exact balance of the wallet(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "balance.from",
                        "in": "query",
                        "description": "The minimum balance of the wallet(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "balance.to",
                        "in": "query",
                        "description": "The maximum balance of the wallet(s) to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/zeroOrMore"
                        }
                    },
                    {
                        "name": "publicKey",
                        "in": "query",
                        "description": "The public key of the wallet to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "attributes.secondPublicKey",
                        "in": "query",
                        "description": "The second public key of the wallet to be returned",
                        "schema": {
                            "$ref": "#/components/schemas/publicKey"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Sorting method",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "address:asc",
                                "address:desc",
                                "attributes.secondPublicKey:asc",
                                "attributes.secondPublicKey:desc",
                                "balance:asc",
                                "balance:desc",
                                "publicKey:asc",
                                "publicKey:desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Wallet not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets/{identifier}": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "Find a single wallet by its identifier",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Can be address, public key or username of the wallet",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Wallet not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets/{identifier}/transactions": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "List all transactions in a specific wallet",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Can be address, public key or username of the wallet",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Wallet not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets/{identifier}/transactions/received": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "List transactions received by a specific wallet",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Can be address, public key or username of the wallet",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Wallet not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets/{identifier}/transactions/sent": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "List transactions sent by a specific wallet",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Can be address, public key or username of the wallet",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Wallet not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets/{identifier}/votes": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "List vote or unvote transactions from a specific wallet",
                "parameters": [
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "Can be address, public key or username of the wallet",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/walletIdentifier"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Wallet not found"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        },
        "/wallets/top": {
            "get": {
                "tags": [
                    "Wallets"
                ],
                "summary": "List wallets in descending order of balance",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The number of the page that will be returned",
                        "schema": {
                            "$ref": "#/components/schemas/page"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of results per page",
                        "schema": {
                            "$ref": "#/components/schemas/limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "422": {
                        "description": "Invalid parameter(s)"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "address": {
                "type": "string",
                "pattern": "^S([A-HJ-NP-Za-km-z1-9]{33})$"
            },
            "idOrHeight": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{64}$|^[1-9][0-9]*$"
            },
            "ip": {
                "type": "string",
                "pattern": "(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)"
            },
            "limit": {
                "type": "integer",
                "default": 100,
                "minimum": 1,
                "maximum": 100
            },
            "lockIds": {
                "type": "object",
                "required": [
                    "ids"
                ],
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/sha256"
                        }
                    }
                }
            },
            "oneOrMore": {
                "type": "integer",
                "minimum": 1
            },
            "page": {
                "type": "integer",
                "default": 1,
                "minimum": 1
            },
            "publicKey": {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{66}$"
            },
            "recipientId": {
                "type": "string",
                "pattern": "^S([A-HJ-NP-Za-km-z1-9]{33})$"
            },
            "semver": {
                "type": "string",
                "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
            },
            "sha256": {
                "type": "string",
                "pattern": "^[0-9a-f]{64}$"
            },
            "signature": {
                "type": "string",
                "pattern": "^[0-9a-f]{128}$"
            },
            "time": {
                "type": "string",
                "pattern": "^(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}.\\d{3})Z$"
            },
            "transaction": {
                "type": "object",
                "required": [
                    "id",
                    "signature",
                    "version",
                    "type",
                    "typeGroup",
                    "fee",
                    "senderPublicKey",
                    "nonce",
                    "memo"
                ],
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/sha256"
                    },
                    "version": {
                        "type": "integer",
                        "example": 3
                    },
                    "type": {
                        "type": "integer",
                        "example": 6
                    },
                    "typeGroup": {
                        "type": "integer",
                        "example": 1
                    },
                    "nonce": {
                        "type": "integer",
                        "example": 1
                    },
                    "asset": {
                        "type": "object",
                        "example": {
                            "transfers": [
                                {
                                    "amount": "100000000",
                                    "recipientId": ""
                                }
                            ]
                        }
                    },
                    "fee": {
                        "type": "integer",
                        "example": 2500000
                    },
                    "senderPublicKey": {
                        "type": "string",
                        "example": "022bcee076006120b24f145d495686d2afc880079daf2eb20d8be9bf0e434ca3e1"
                    },
                    "memo": {
                        "type": "string",
                        "example": "Welcome to Solar!"
                    },
                    "signature": {
                        "$ref": "#/components/schemas/signature"
                    }
                }
            },
            "transactions": {
                "type": "object",
                "required": [
                    "transactions"
                ],
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/transaction"
                        },
                        "minItems": 1
                    }
                }
            },
            "transactionTypeGroups": {
                "type": "integer",
                "enum": []
            },
            "transactionTypes": {
                "type": "integer",
                "enum": []
            },
            "transactionVersions": {
                "type": "integer",
                "enum": []
            },
            "username": {
                "type": "string",
                "pattern": "^(?=.*[a-z!@$&_.])([a-z0-9!@$&_.]?){1,20}$"
            },
            "walletIdentifier": {
                "type": "string",
                "pattern": "^S([A-HJ-NP-Za-km-z1-9]{33})$|^[0-9a-fA-F]{66}$|^(?=.*[a-z!@$&_.])([a-z0-9!@$&_.]?){1,20}$"
            },
            "zeroOrMore": {
                "type": "integer",
                "minimum": 0
            }
        }
    }
}
