#!/usr/bin/env node

const { existsSync, readdirSync, readJsonSync, statSync } = require("fs-extra");
const { dirname, join } = require("path");
const { coerce, satisfies } = require("semver");

const main = async () => {
    try {
        const coreVersion = readJsonSync(`${__dirname}/../package.json`).version;
        const nodeNeeded = readJsonSync(`${__dirname}/../../../package.json`).engines.node;

        if (!satisfies(process.versions.node, nodeNeeded)) {
            console.error(`Core ${coreVersion} requires Node.js v${coerce(nodeNeeded).version}+, but you have ${process.version}`);
            process.exit(1);
        }

        const { addAlias } = require("module-alias");
        const files = readdirSync(`${__dirname}/../../`).map(
            (file) => `${__dirname}/../../${file}/package.json`)
            .filter((file) => existsSync(file) && statSync(file).isFile());

         for (const file of files) {
             if (file.endsWith("/package.json")) {
                 let { name } = readJsonSync(file);
                 if (name.startsWith("@solar-network/")) {
                    const dir = file.substring(0, file.length - 13);
                    addAlias(name, dir);
                }
            }
        }

        const extraPackages = ["joi"];

        for (const pkg of extraPackages) {
            addAlias(pkg, dirname(require.resolve(join(pkg, "package.json"))));
        }

        const CommandLineInterface = new (require("../dist").CommandLineInterface)(process.argv.slice(2));

        await CommandLineInterface.execute();
    } catch (error) {
        if (error.name !== "FatalException") {
            console.error(error);
        }

        process.exitCode = 1;
    }
};

main();
